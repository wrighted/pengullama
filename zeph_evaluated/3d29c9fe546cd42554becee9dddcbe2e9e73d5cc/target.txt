Original commit: https://github.com/zephyrproject-rtos/zephyr/commit/3d29c9fe546cd42554becee9dddcbe2e9e73d5cc

### Instruction:
I am having trouble with the following code in relation to kernel: timeout: fix issue with z_timeout_expires. Whats wrong? Please fix this issue.

### Input:
Here is the faulty code:

	k_ticks_t ticks = 0;

	K_SPINLOCK(&timeout_lock) {
		ticks = curr_tick + timeout_rem(timeout);
	}

	return ticks;

### Tokenized:
Here is the faulty code which has been tokenized:

begin_decl_stmt
name|k_ticks_t
name|ticks
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_macro
name|K_SPINLOCK
argument_list|(
argument|&timeout_lock
argument_list|)
end_macro
begin_block
block|{
name|ticks
operator|=
name|curr_tick
operator|+
name|timeout_rem
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
end_block
begin_return
return|return
name|ticks
return|;
end_return

### Error location:
I have identified the issue in the tokenized code. I have placed a <START_ERROR> before the problematic tokens and a <END_ERROR> after the problematic tokens:

begin_decl_stmt
name|k_ticks_t
name|ticks
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_macro
name|K_SPINLOCK
argument_list|(
argument|&timeout_lock
argument_list|)
end_macro
begin_block
block|{
name|ticks
operator|=
name|curr_tick
operator|+
name|timeout_rem
argument_list|(
name|timeout
argument_list|)
<END_ERROR>
<START_ERROR>
expr_stmt|;
block|}
end_block
begin_return
return|return
name|ticks
return|;
end_return

### Error correction:
Here is the tokenized code with the issue corrected:

begin_decl_stmt
name|k_ticks_t
name|ticks
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_macro
name|K_SPINLOCK
argument_list|(
argument|&timeout_lock
argument_list|)
end_macro
begin_block
block|{
name|ticks
operator|=
name|curr_tick
operator|+
name|timeout_rem
argument_list|(
name|timeout
argument_list|)
operator|+
name|elapsed
argument_list|()
expr_stmt|;
block|}
end_block
begin_return
return|return
name|ticks
return|;
end_return

### Response:
I corrected the issue in the code you provided:

	k_ticks_t ticks = 0;

	K_SPINLOCK(&timeout_lock) {
		ticks = curr_tick + timeout_rem(timeout);
	}

	return ticks;
The issue was with: kernel: timeout: fix issue with z_timeout_expires

- issue found with Ztest case of test_thread_timeout_remaining_expires
  on Intel ISH platform when adjust CONFIG_SYS_CLOCK_TICKS_PER_SEC
  to 10k.
- timeout_rem() return exact remaining ticks which is calibrated by
  decrease elapsed(), while z_timeout_expires try to get expire ticks
  to be timeout using current tick as base, so need get exact current
  ticks by plus elasped().. Here is the corrected version:

	k_ticks_t ticks = 0;

	K_SPINLOCK(&timeout_lock) {
		ticks = curr_tick + timeout_rem(timeout) + elapsed();
	}

	return ticks;