Original commit: https://github.com/zephyrproject-rtos/zephyr/commit/a816180b166cab184e566055b1534fb339909eaa
### Tokenized:
Here is the faulty code which has been tokenized:

begin_expr
operator|new
name|file
name|mode
literal|100644
end_expr

### Error location:
I have identified the issue in the tokenized code. I have placed a <START_ERROR> before the problematic tokens and a <END_ERROR> after the problematic tokens:

<START_ERROR>
begin_expr
operator|new
name|file
name|mode
literal|100644
end_expr
<END_ERROR>

### Error correction:
Here is the tokenized code with the issue corrected:

begin_expr_stmt
operator|new
name|file
name|mode
literal|100644
comment|/*
comment|/*
include|#
directive|include
file|<zephyr/canbus/isotp.h>
include|#
directive|include
file|<zephyr/ztest.h>
specifier|static
specifier|const
expr|struct
name|device
operator|*
specifier|const
name|can_dev
operator|=
name|DEVICE_DT_GET
argument_list|(
name|DT_CHOSEN
argument_list|(
name|zephyr_canbus
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|struct
name|isotp_recv_ctx
name|recv_ctx
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|struct
name|isotp_send_ctx
name|send_ctx
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|bool
name|canfd_capable
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|struct
name|isotp_fc_opts
name|fc_opts
init|=
block|{
operator|.
name|bs
operator|=
literal|0
block|,
operator|.
name|stmin
operator|=
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|struct
name|isotp_msg_id
name|rx_addr
init|=
block|{
operator|.
name|std_id
operator|=
literal|0x20
block|,
ifdef|#
directive|ifdef
name|CONFIG_TEST_USE_CAN_FD_MODE
operator|.
name|dl
operator|=
name|CONFIG_TEST_ISOTP_TX_DL
block|,
operator|.
name|flags
operator|=
name|ISOTP_MSG_FDF
operator||
name|ISOTP_MSG_BRS
block|,
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|struct
name|isotp_msg_id
name|tx_addr
init|=
block|{
operator|.
name|std_id
operator|=
literal|0x21
block|,
ifdef|#
directive|ifdef
name|CONFIG_TEST_USE_CAN_FD_MODE
operator|.
name|dl
operator|=
name|CONFIG_TEST_ISOTP_TX_DL
block|,
operator|.
name|flags
operator|=
name|ISOTP_MSG_FDF
operator||
name|ISOTP_MSG_BRS
block|,
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|ZTEST
argument_list|(
argument|isotp_conformance_mode_check
argument_list|,
argument|test_bind
argument_list|)
end_macro
begin_block
block|{
name|int
name|err
decl_stmt|;
name|err
operator|=
name|isotp_bind
argument_list|(
operator|&
name|recv_ctx
argument_list|,
name|can_dev
argument_list|,
operator|&
name|rx_addr
argument_list|,
operator|&
name|tx_addr
argument_list|,
operator|&
name|fc_opts
argument_list|,
name|K_NO_WAIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|IS_ENABLED
argument_list|(
name|CONFIG_TEST_USE_CAN_FD_MODE
argument_list|)
operator|&&
operator|!
name|canfd_capable
condition|)
block|{
name|zassert_equal
argument_list|(
name|err
argument_list|,
name|ISOTP_N_ERROR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zassert_equal
argument_list|(
name|err
argument_list|,
name|ISOTP_N_OK
argument_list|)
expr_stmt|;
block|}
name|isotp_unbind
argument_list|(
operator|&
name|recv_ctx
argument_list|)
expr_stmt|;
block|}
end_block
begin_macro
name|ZTEST
argument_list|(
argument|isotp_conformance_mode_check
argument_list|,
argument|test_send
argument_list|)
end_macro
begin_block
block|{
name|uint8_t
name|buf
index|[]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|int
name|err
decl_stmt|;
name|err
operator|=
name|isotp_send
argument_list|(
operator|&
name|send_ctx
argument_list|,
name|can_dev
argument_list|,
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
operator|&
name|rx_addr
argument_list|,
operator|&
name|tx_addr
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|IS_ENABLED
argument_list|(
name|CONFIG_TEST_USE_CAN_FD_MODE
argument_list|)
operator|&&
operator|!
name|canfd_capable
condition|)
block|{
name|zassert_equal
argument_list|(
name|err
argument_list|,
name|ISOTP_N_ERROR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zassert_equal
argument_list|(
name|err
argument_list|,
name|ISOTP_N_OK
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_function
specifier|static
name|void
modifier|*
name|isotp_conformance_mode_check_setup
parameter_list|(
name|void
parameter_list|)
block|{
name|can_mode_t
name|cap
decl_stmt|;
name|int
name|err
decl_stmt|;
name|zassert_true
argument_list|(
name|device_is_ready
argument_list|(
name|can_dev
argument_list|)
argument_list|,
literal|"CAN
argument_list|)
expr_stmt|;
name|err
operator|=
name|can_get_capabilities
argument_list|(
name|can_dev
argument_list|,
operator|&
name|cap
argument_list|)
expr_stmt|;
name|zassert_equal
argument_list|(
name|err
argument_list|,
literal|0
argument_list|,
literal|"failed
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|canfd_capable
operator|=
operator|(
name|cap
operator|&
name|CAN_MODE_FD
operator|)
operator|!=
literal|0
expr_stmt|;
operator|(
name|void
operator|)
name|can_stop
argument_list|(
name|can_dev
argument_list|)
expr_stmt|;
name|err
operator|=
name|can_set_mode
argument_list|(
name|can_dev
argument_list|,
name|CAN_MODE_LOOPBACK
operator||
operator|(
name|canfd_capable
condition|?
name|CAN_MODE_FD
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|zassert_equal
argument_list|(
name|err
argument_list|,
literal|0
argument_list|,
literal|"Failed
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|err
operator|=
name|can_start
argument_list|(
name|can_dev
argument_list|)
expr_stmt|;
name|zassert_equal
argument_list|(
name|err
argument_list|,
literal|0
argument_list|,
literal|"Failed
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
end_function
begin_expr_stmt
name|ZTEST_SUITE
argument_list|(
name|isotp_conformance_mode_check
argument_list|,
name|NULL
argument_list|,
name|isotp_conformance_mode_check_setup
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
end_expr_stmt
