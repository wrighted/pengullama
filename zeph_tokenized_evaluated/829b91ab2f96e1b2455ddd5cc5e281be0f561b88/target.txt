Original commit: https://github.com/zephyrproject-rtos/zephyr/commit/829b91ab2f96e1b2455ddd5cc5e281be0f561b88
### Tokenized:
Here is the faulty code which has been tokenized:

begin_function
name|void
name|z_shell_print_cmd
parameter_list|(
specifier|const
name|struct
name|shell
modifier|*
name|sh
parameter_list|)
block|{
name|z_shell_raw_fprintf
argument_list|(
name|sh
operator|->
name|fprintf_ctx
argument_list|,
literal|"%s"
argument_list|,
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl
name|void
name|z_shell_print_prompt_and_cmd
argument_list|(
specifier|const
expr|struct
name|shell
operator|*
name|sh
argument_list|)
end_decl

### Error location:
I have identified the issue in the tokenized code. I have placed a <START_ERROR> before the problematic tokens and a <END_ERROR> after the problematic tokens:

begin_function
name|void
name|z_shell_print_cmd
parameter_list|(
specifier|const
name|struct
name|shell
modifier|*
name|sh
parameter_list|)
block|{
<START_ERROR>
name|z_shell_raw_fprintf
argument_list|(
name|sh
operator|->
name|fprintf_ctx
argument_list|,
literal|"%s"
argument_list|,
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
argument_list|)
expr_stmt|;
<END_ERROR>
block|}
end_function
begin_decl
name|void
name|z_shell_print_prompt_and_cmd
argument_list|(
specifier|const
expr|struct
name|shell
operator|*
name|sh
argument_list|)
end_decl

### Error correction:
Here is the tokenized code with the issue corrected:

begin_function
name|void
name|z_shell_print_cmd
parameter_list|(
specifier|const
name|struct
name|shell
modifier|*
name|sh
parameter_list|)
block|{
name|int
name|beg_offset
init|=
literal|0
decl_stmt|;
name|int
name|end_offset
init|=
literal|0
decl_stmt|;
name|int
name|cmd_width
init|=
name|z_shell_strlen
argument_list|(
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
argument_list|)
decl_stmt|;
name|int
name|adjust
init|=
name|sh
operator|->
name|ctx
operator|->
name|vt100_ctx
operator|.
name|cons
operator|.
name|name_len
decl_stmt|;
name|char
name|ch
decl_stmt|;
while|while
condition|(
name|cmd_width
operator|>
name|sh
operator|->
name|ctx
operator|->
name|vt100_ctx
operator|.
name|cons
operator|.
name|terminal_wid
operator|-
name|adjust
condition|)
block|{
name|end_offset
operator|+=
name|sh
operator|->
name|ctx
operator|->
name|vt100_ctx
operator|.
name|cons
operator|.
name|terminal_wid
operator|-
name|adjust
expr_stmt|;
name|ch
operator|=
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
index|[
name|end_offset
index|]
expr_stmt|;
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
index|[
name|end_offset
index|]
operator|=
literal|'\0'
expr_stmt|;
name|z_shell_raw_fprintf
argument_list|(
name|sh
operator|->
name|fprintf_ctx
argument_list|,
literal|"%s\n"
argument_list|,
operator|&
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
index|[
name|beg_offset
index|]
argument_list|)
expr_stmt|;
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
index|[
name|end_offset
index|]
operator|=
name|ch
expr_stmt|;
name|cmd_width
operator|-=
operator|(
name|sh
operator|->
name|ctx
operator|->
name|vt100_ctx
operator|.
name|cons
operator|.
name|terminal_wid
operator|-
name|adjust
operator|)
expr_stmt|;
name|beg_offset
operator|=
name|end_offset
expr_stmt|;
name|adjust
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|cmd_width
operator|>
literal|0
condition|)
block|{
name|z_shell_raw_fprintf
argument_list|(
name|sh
operator|->
name|fprintf_ctx
argument_list|,
literal|"%s"
argument_list|,
operator|&
name|sh
operator|->
name|ctx
operator|->
name|cmd_buff
index|[
name|beg_offset
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_decl
name|void
name|z_shell_print_prompt_and_cmd
argument_list|(
specifier|const
expr|struct
name|shell
operator|*
name|sh
argument_list|)
end_decl
